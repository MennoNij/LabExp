classdef WBExp < handle
% The container class for the design and the experiment flow; it's the main loop of the system
    properties (SetAccess = private, GetAccess = public)
        running = 1;        % flag that determines if the experiment is active
        startTime = 0;      % the timestamp at which the experiment was started

        flow                % handle to the flow of the experiment, which controls the design
        design              % handle to the design of the experiment, which contains all the scenes and tasks
        eventBuffer         % handle to the event buffer, which contains the events generated by the design

        lps = 0;            % a counter of the number of loops the program has run, to determine runspeed
    end % properties

    methods
        function obj = WBExp(flw, dsgn)
            %disp('Init experiment');
            obj.eventBuffer = WBEventBuffer;

            if (nargin < 2)
                % create a 'default' experiment
                obj.flow = WBFlow(obj.eventBuffer);
                obj.design = WBDesign(obj.eventBuffer);
            else
                obj.flow = flw;
                obj.design = dsgn;
                obj.flow.eventBuffer = obj.eventBuffer;
                obj.design.eventBuffer = obj.eventBuffer;
            end

            obj.flow.design = obj.design;
        end % constructor

        function start(this)
        % START the function that should be called to run the experiment

            screenNum = this.design.screenNumber;
            clrdepth = 32;
            [w, h] = this.design.getScreenSize();
            %w = 480;%1366;
            %h = 320;%768;
            [wPtr, rect] = Screen('OpenWindow', screenNum, [0 0 0], [0 0 w h], clrdepth);
            Screen('Blendfunction', wPtr, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
            white = WhiteIndex(wPtr);
            black = BlackIndex(wPtr);
            Screen('FillRect',wPtr,black);
            Screen(wPtr, 'Flip');

            %disp(['EXP: wPtr: ', num2str(wPtr)]);
            
            this.design.wPtr = wPtr;

            this.startTime = GetSecs;
            this.flow.start();
            this.flow.trial.startTime = this.startTime;

            % explicitly start the first trial, which should set up all the scenes, etc.
            this.flow.trial.start();

            this.run();
        end

        function value = get.flow(this)
            value = this.flow;
        end

    end % methods

    methods (Access = private)

        function run(this)
        % RUN the main loop of the experiment. Each iteration both the design and the flow are (possibly) updated

            %HideCursor();
            %FlushEvents;

            while (this.running)
                this.design.update();
                this.flow.update();

                this.running = ~this.flow.isFinished() & ~this.design.finished;

                % events should be cleaned up after each loop
                this.eventBuffer.empty();

                % get some basic speed information
                this.lps = this.lps + 1;
            end % main loop

            Screen('CloseAll');
            ShowCursor();

            %disp('Exiting main loop');
            disp(['Average Run Speed: ', num2str(round(this.lps / (GetSecs - this.startTime))), 'Hz']);
        end % run
    end % methods

end
